import asyncio
import re

from PIL import Image
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ParseMode, ContentType, ContentTypes
from aiogram.utils import executor
from pyzbar.pyzbar import decode

from conf import *
from keyboard import *


class Choises(StatesGroup):
    kod = State()
    nomer = State()
    foto = State()


@dp.message_handler(commands=['start'])
async def start(message):
    await bot.send_sticker(message.chat.id,
                           'CAACAgIAAxkBAAEDtB9h5g4uoZuncEGXMVP4YgrdCXfuugACIAADwZxgDGWWbaHi0krRIwQ')
    await message.reply(
        "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ,<b> {0.first_name}!</b>\n\n  ‚úÖ –Ø -<b> {1.first_name}</b>\n\n\n–û–±–µ—Ä—ñ—Ç—å,–±—É–¥—å –ª–∞—Å–∫–∞, "
        "something   \nüëá  –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É  üëá".format(
            message.from_user, await bot.get_me()),
        reply_markup=await keyboard_start(), reply=False, parse_mode=ParseMode.HTML)


@dp.message_handler(commands=['pay'])
async def pay(message: types.Message):
    await bot.send_message(message.chat.id,
                           "–¶—è –∫–∞—Ä—Ç–∫–∞ –Ω–µ –ø—Ä–∞—Ü—é—î –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏."
                           " –¢–µ—Å—Ç–æ–≤–∞ –∫–∞—Ä—Ç–∫–∞ –≤–≤–æ–¥—ñ—Ç—å –ø—Ä–∏ –æ–ø–ª–∞—Ç—ñ: `4242 4242 4242 4242`"
                           "\n\n–¢–µ—Å—Ç–æ–≤–∏–π –ø–ª–∞—Ç—ñ–∂:", parse_mode=ParseMode.HTML)
    # reply_markup=await keyboard_pay()
    await bot.send_invoice(message.chat.id, title='–û–ø–ª–∞—Ç–∞ –∑–∞ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è',
                           description='–û–ø–ª–∞—Ç–∏, —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è –∏ —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å!',
                           provider_token=PAYMENTS_PROVIDER_TOKEN,
                           currency='uah',
                           prices=prices,
                           payload='–°–ø–ª–∞—Ç–∞ –∑–∞ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è'
                           )


@dp.callback_query_handler(lambda callback_query: True)
async def callback_handler(callback_query: types.CallbackQuery):
    if callback_query.data == 'nomer':
        await callback_query.message.answer('üëá–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤ —á–∞—Çüëá –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±—ñ–ª—è')
        await bot.answer_callback_query(callback_query.id)
        await Choises.nomer.set()

    if callback_query.data == 'kod':
        await callback_query.message.answer('üëá–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤ —á–∞—Çüëá –Ω–æ–º–µ—Ä —à—Ç—Ä–∏—Ö –∫–æ–¥—É –ø–∞—Ä–∫—É–≤–∞–ª—å–Ω–æ–≥–æ —Ç–∞–ª–æ–Ω—É')
        await bot.answer_callback_query(callback_query.id)
        await Choises.kod.set()

    if callback_query.data == 'foto':
        await bot.answer_callback_query(callback_query.id, 'üëá–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤ —á–∞—Çüëá —Ñ–æ—Ç–æ —Ç–∞–ª–æ–Ω—É', show_alert=True)
        await Choises.foto.set()


@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='–≤—ñ–¥–º—ñ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        return

    # logging.info('Cancelling state %r', current_state)
    # Cancel state and inform user about it
    await state.finish()
    # And remove keyboard (just in case)
    await bot.send_sticker(message.chat.id,
                           'CAACAgIAAxkBAAEDtBlh5eZJ4xhbHs_q2kGgiWsQ7Xhg5AACKQADwZxgDPBLqR6_2N98IwQ',
                           reply_markup=types.ReplyKeyboardRemove()
                           )
    await message.reply('–í—ñ–¥–º—ñ–Ω–µ–Ω–æ', reply_markup=await keyboard_start())


@dp.message_handler(state=Choises.nomer)
async def nomer(message: types.Message, state: FSMContext):
    try:
        nomer_avto = message.text

        if re.match(r'[–ê-–Ø–∞-—è]{2}[0-9]{4}[–ê-–Ø–∞-—è]{2}', nomer_avto):
            await message.reply(
                f'<b>–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:</b>\n {message.text}\n\n<b>–°–ø–ª–∞—Ç–∏—Ç–∏</b> –∑–∞ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è —Ç–∏—Å–Ω—ñ—Ç—å <b>/pay</b>',
                parse_mode=ParseMode.HTML)
            print(nomer_avto)
            await state.finish()
        else:
            await message.reply(
                f'–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–æ–¥—É',
                parse_mode=ParseMode.HTML)
    except Exception as ex:
        print(ex)
        await state.finish()


@dp.message_handler(state=Choises.kod)
async def kod(message: types.Message, state: FSMContext):
    try:
        kod = message.text
        await message.reply(f'<b>–ù–æ–º–µ—Ä —Ç–∞–ª–æ–Ω–∞:</b>\n {message.text}\n<b>–°–ø–ª–∞—Ç–∏—Ç–∏</b> –∑–∞ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è —Ç–∏—Å–Ω—ñ—Ç—å <b>/pay</b>',
                            parse_mode=ParseMode.HTML)

        print(kod)
        await state.finish()
    except Exception as ex:
        print(ex)
        await state.finish()


prices = [
    types.LabeledPrice(label='–û–ø–ª–∞—Ç–∞ –∑–∞ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è', amount=10000),  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö

]


@dp.message_handler(commands=['terms'])
async def cmd_terms(message: types.Message):
    await bot.send_message(message.chat.id,
                           '–î—è–∫—É—î–º–æ –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º.  –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è')


@dp.pre_checkout_query_handler(lambda query: True)
async def checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                        error_message="–ò–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ –ø—ã—Ç–∞–ª–∏—Å—å —É–∫—Ä–∞—Å—Ç—å CVV –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã, –Ω–æ –º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—â–∏—Ç–∏–ª–∏ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É, –Ω–∞–º –Ω—É–∂–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç–¥—ã—Ö.")


@dp.message_handler(content_types=ContentTypes.SUCCESSFUL_PAYMENT)
async def got_payment(message: types.Message):
    await bot.send_message(message.chat.id,
                           '–£—Ä–∞–∞–∞! –î—è–∫—É—î–º–æ! –í–∞—à –ø–ª–∞—Ç—ñ–∂ –Ω–∞ `{} {}`'
                           ' —É—Å–ø—ñ—à–Ω–æ –∑–¥—ñ–π—Å–Ω–µ–Ω–∏–π! –ù–∞ –≤—Å–µ –¥–æ–±—Ä–µ. –ì–∞—Ä–Ω–æ–≥–æ –≤–∞–º –Ω–∞—Å—Ç—Ä–æ—é'.format(
                               message.successful_payment.total_amount / 100, message.successful_payment.currency),
                           parse_mode='Markdown')


@dp.message_handler(content_types=['text'])
async def msg(message):
    await message.reply('<b>–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—Å—ñ–± –Ω–∞–¥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó</b>',
                        reply_markup=await keyboard_start(), reply=False,
                        parse_mode=ParseMode.HTML)


@dp.message_handler(content_types=[types.ContentType.ANIMATION])
async def animation_handle(message: types.Message):
    await message.reply_animation(message.animation.file_id, reply_markup=await keyboard_start())


def BarcodeReader(image_path):
    # read the image in numpy array using cv2
    # img = cv2.imread(image_path)
    img = Image.open(image_path)
    # Decode the barcode image
    detectedBarcodes = decode(img)

    # If not detected then print the message
    if not detectedBarcodes:
        print("Barcode Not Detected or your barcode is blank/corrupted!")

    else:

        #  detect barcodes in image
        for barcode in detectedBarcodes:

            # Locate the barcode position in image
            # (x, y, w, h) = barcode.rect

            # Put the rectangle in image using
            # cv2 to heighlight the barcode
            # cv2.rectangle(img, (x - 10, y - 10),
            #               (x + w + 10, y + h + 10),
            #               (255, 0, 0), 2)

            if barcode.data != "":
                # Print the barcode data
                print(barcode.type)
                return barcode.data


@dp.message_handler(state=Choises.foto, content_types=ContentType.ANY)
async def foto(message: types.Message, state: FSMContext):
    try:
        foto_info = await bot.get_file(message.photo[len(message.photo) - 1].file_id)
        print(foto_info)
        downloaded_file = await bot.download_file(foto_info.file_path)
        print(message.photo[len(message.photo) - 1].as_json())
        src = foto_info.file_path
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file.getvalue())

        # stroka = img_reader(src)
        stroka = BarcodeReader(src)

        if stroka:
            bc = str(stroka).split("'")[1]
        else:
            bc = str(stroka)

        if stroka is None:
            await message.reply(
                '<b>–í–∏–±–∞—á—Ç–µ,</b> –∞–ª–µ <b>—à—Ç—Ä–∏—Ö –∫–æ–¥</b> –Ω–µ –¥—É–∂–µ —á—ñ—Ç–∫–æ –≤–∏–¥–Ω–æ.',
                reply=False, parse_mode=ParseMode.HTML)
        else:
            await message.reply(
                '–ù–æ–º–µ—Ä —Ç–∞–ª–æ–Ω–∞: ' + bc + '\n–Ø–∫—â–æ –Ω–æ–º–µ—Ä –≤—ñ—Ä–Ω–∏–π, —Ç–æ –≤–∏ –º–æ–∂–µ—Ç–µ —Å–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ <b>/pay</b>',
                reply=False, parse_mode=ParseMode.HTML)

        await state.finish()
    except Exception as ex:
        print(ex)
        await state.finish()


if __name__ == '__main__':
    while True:
        try:
            executor.start_polling(dp, skip_updates=True)
        except Exception as ex:
            asyncio.sleep(2)
            print(ex)
